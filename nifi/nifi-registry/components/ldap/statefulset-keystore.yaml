apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nifi-registry
spec:
  template:
    spec:
      initContainers:
        - name:  pem-to-keystore
          image: rh-sso
          env:
            - name: CRTFILE
              value: /var/run/secrets/openshift.io/serving_cert/tls.crt
            - name: KEYFILE
              value: /var/run/secrets/openshift.io/serving_cert/tls.key
            - name: KEYSTORE_PKCS12
              value: /var/run/secrets/java.io/keystores/keystore.pkcs12
            - name: KEYSTORE_JKS
              value: /var/run/secrets/java.io/keystores/keystore.jks
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-keystore
                  key: password
          command:
            - /bin/bash
          args:
            - '-c'
            - "openssl pkcs12 -export -inkey $KEYFILE -in $CRTFILE -out $KEYSTORE_PKCS12 -password pass:$PASSWORD && keytool -importkeystore -noprompt -srckeystore $KEYSTORE_PKCS12 -srcstoretype pkcs12 -destkeystore $KEYSTORE_JKS -storepass $PASSWORD -srcstorepass $PASSWORD"
          volumeMounts:
            - name: keystore
              mountPath: /var/run/secrets/java.io/keystores
            - name: serving-cert
              mountPath: /var/run/secrets/openshift.io/serving_cert
        - name: pem-to-truststore
          image: rh-sso
          env:
            - name: CA_BUNDLE
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            - name: TRUSTSTORE_JKS
              value: /var/run/secrets/java.io/keystores/truststore.jks
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-keystore
                  key: password
          command:
            - '/bin/bash'
          args:
            - '-c'
            - "cd /tmp && csplit -z -f crt- $CA_BUNDLE '/-----BEGIN CERTIFICATE-----/' '{*}' && for file in crt-*; do keytool -import -noprompt -keystore $TRUSTSTORE_JKS -file $file -storepass $PASSWORD -alias service-$file; done"
          volumeMounts:
            - name: keystore
              mountPath: /var/run/secrets/java.io/keystores
      containers:
        - name: nifi-registry
          env:
            - name: KEYSTORE_PATH
              value: /opt/certs/keystore.jks
            - name: KEYSTORE_TYPE
              value: JKS
            - name: KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-keystore
                  key: password
            - name: TRUSTSTORE_PATH
              value: /opt/certs/truststore.jks
            - name: TRUSTSTORE_TYPE
              value: JKS
            - name: TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-keystore
                  key: password
            - name: LDAP_TLS_KEYSTORE
              value: /opt/certs/keystore.jks
            - name: LDAP_TLS_KEYSTORE_TYPE
              value: JKS
            - name: LDAP_TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-keystore
                  key: password
            - name: LDAP_TLS_TRUSTSTORE
              value: /opt/certs/truststore.jks
            - name: LDAP_TLS_TTRUSTSTORE_TYPE
              value: JKS
            - name: LDAP_TLS_TTRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-keystore
                  key: password
          envFrom:
            - configMapRef:
                name: ldap-config
          ports:
            - name: https
              containerPort: 18443
          startupProbe:
            httpGet:
              port: https
              scheme: HTTPS
          readinessProbe:
            httpGet:
              port: https
              scheme: HTTPS
          livenessProbe:
            httpGet:
              port: https
              scheme: HTTPS
          volumeMounts:
            - name: keystore
              mountPath: /opt/certs              
      volumes:
        - name: serving-cert
          secret:
            secretName: nifi-registry-serving-cert
        - name: keystore
          emptyDir: {}
